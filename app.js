const qrcode = require('qrcode-terminal');
const sqlite3 = require('sqlite3').verbose();
var moment = require('moment');
const { Client, LocalAuth } = require('whatsapp-web.js');

const client = new Client({
  authStrategy: new LocalAuth({ clientId: "client-one" })
});

client.on('qr', qr => {
  qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
  console.log('Client is ready!');
});

client.initialize();


let db = new sqlite3.Database('./db/dados.db3', sqlite3.OPEN_READWRITE, (err) => {
  if (err) {
    console.error(err.message);
  }
  console.log('Connected to the database.');
});

client.on('message', message => {

  if (message.body === '/proximojogo') {
    getJogo(client, message, true);
  }

  if (message.body === '/aisabe') {
    AiSabe(message);
  }

  if (message.body.startsWith('/jogo ')) {
    let tmp = message.body.split(' ');
    if (tmp.length != 2) return message.reply(`‚ùå Comando est√° errado, utilize */jogo 'ID'*, sem aspas.`);
    var idJogo = tmp[1];
    if (!isNumeric(idJogo)) return message.reply(`‚ùå O ID do jogo precisa ser um n√∫mero */jogo 'ID'*, sem aspas.`);
    getJogo(client, message, true, idJogo)
  }

  if (message.body === '/jogos') {
    db.serialize(() => {
      var sqlJogos = `SELECT * FROM Jogos `;
      db.all(sqlJogos, (err, rows) => {
        if (err) {
          console.error(err.message);
        }
        var r = "üèÜ Trof√©u Ai Sabe üèÜ\n\n";
        r += "\n\n*Jogos:*\n";

        rows.forEach((row) => {
          if (getBandeira(row.HomeTeam) != '') {
            r += getBandeira(row.HomeTeam) + " " + row.HomeTeam + " x " + row.AwayTeam + " " + getBandeira(row.AwayTeam);
            r += "\nüóìÔ∏è " + moment(row.DateUtc).format("DD/MM/YYYY [√†s] HH:mm");
            r += "\nüÜî " + row.MatchNumber + "\n\n";
          }
        });

        message.reply(r);
      });
    });
  }

  if (message.body === '/tabela') {
    atualizarTabela();
    db.serialize(() => {
      var sqlJogos = `SELECT * FROM Usuarios ORDER BY Pontos DESC`;
      db.all(sqlJogos, (err, rows) => {
        if (err) {
          console.error(err.message);
        }
        var r = "üèÜ Trof√©u Ai Sabe üèÜ\n\n";
        r += "*Tabela de pontos*\n";
        var countPos = 0;
        rows.forEach((row) => {
          if (countPos == 0) r += "ü•á ";
          else if (countPos == 1) r += "ü•à ";
          else if (countPos == 2) r += "ü•â ";
          else if (countPos == rows.length - 1) r += "üî¶ ";
          else r += "‚û°Ô∏è ";
          r += `${row.Apelido} - ${row.Pontos} Pontos\n`;
          countPos++;

        });
        message.reply(r);
      });
    });
  }

  if (message.body === '/jogosdia') {
    getJogo(client, message, true, undefined, true)
  }

  if (message.body.startsWith('/c ')) {
    let apelidoTmp = message.body.split(' ');

    apelidoTmp[0] = '';
    let apelido = apelidoTmp.join(" ").trim();

    db.serialize(() => {
      var user = message.author != undefined ? user = message.author : user = message.from;
      db.get(`SELECT * FROM Usuarios WHERE Codigo = '${user}'`, (err, row) => {
        if (err) {
          return console.log(err.message);
        }
        if (row == undefined) {
          message.getContact().then((response) => {
            var sql = `INSERT INTO Usuarios (Codigo, Apelido, Nome) VALUES ('${user}', '${apelido}', '${response.name}' )`;

            db.run(sql, function (err) {
              if (err) {
                return console.log(err.message);
              }
              // get the last insert id
              console.log(`${moment()} - Cadastrado [${apelido}] [${user}]`);
              message.reply(`‚úÖ Agora vc est√° cadastrado, seu apelido ser√° *${apelido}*\n\nFique a vontade pra palpitar.`);
            });
          });
        } else {
          message.reply(`Irm√£o, vc j√° est√° cadastrado, ta pensando que √© bagun√ßa!?\n\n*${row.Apelido}*\n\nüò° Seu bostinha`);
        }

      });
    });
  }

  if (message.body.startsWith('/bet ')) {
    let tmp = message.body.toLowerCase().split(' ');
    if (tmp.length != 3) return message.reply(`‚ùå Ta faltando alguma informa√ß√£o ai, tem que ter 'ID' e o placar com dois n√∫meros separados por X.\nExemplo /bet ${idJogo} 1x1`);

    var idJogo = tmp[1].trim();

    var placar = tmp[2].split('x');
    if (placar.length != 2) return message.reply(`‚ùå O placar escolhido ta errado, tem que ser dois n√∫meros separados por X.\nExemplo /bet ${idJogo} 1x1`);

    var placar1 = placar[0].trim();
    var placar2 = placar[1].trim();

    if (!isNumeric(placar1)) return message.reply(`‚ùå O placar escolhido ta errado, tem que ser dois n√∫meros separados por X.\nExemplo /bet ${idJogo} 1x1`);
    if (!isNumeric(placar2)) return message.reply(`‚ùå O placar escolhido ta errado, tem que ser dois n√∫meros separados por X.\nExemplo /bet ${idJogo} 1x1`);

    db.serialize(() => {
      var user = message.author != undefined ? user = message.author : user = message.from;
      db.get(`SELECT * FROM Jogos WHERE MatchNumber = ${idJogo}`, (err, row) => {
        if (err) {
          return console.log(err.message);
        }

        if (row == undefined) return message.reply("Esse jogo n√£o existe, use o comando */jogos* para ver todos os jogos disponiveis.");

        if (moment().format('YYYY-MM-DD') != moment(row.DateUtc).format('YYYY-MM-DD')) return message.reply("‚ùå Os palpites para esse jogo ainda n√£o foram aberto.\n\n‚ö†Ô∏è Voc√™ s√≥ pode palpitar nos jogos do dia.\nUse */jogosdia* para saber quais jogos est√£o abertos.");

        if (moment() > moment(row.DateUtc)) return message.reply("‚ö†Ô∏è O jogo j√° come√ßou, infelizmente os palpites est√£o encerrados.");

        db.get(`SELECT * FROM Usuarios WHERE Codigo = '${user}'`, (err, row) => {
          if (err) {
            return console.log(err.message);
          }
          if (row != undefined) {
            db.get(`SELECT * FROM Palpites WHERE CodUsuario = '${user}' AND MatchNumber = ${idJogo}`, (err, row) => {
              if (err) {
                return console.log(err.message);
              }
              if (row == undefined) {
                var sql = `INSERT INTO Palpites (CodUsuario, MatchNumber, GolsHomeTime, GolsForaTime) VALUES ('${user}', ${idJogo}, ${placar1}, ${placar2} )`;
                db.run(sql, function (err) {
                  if (err) {
                    return console.log(err.message);
                  }
                  // get the last insert id
                  console.log(`${moment()} - Palpite [${user}]`);
                  message.reply(`‚úÖ Palpite para o jogo foi cadastrado.\nTor√ßa pra acertar.`);
                  getJogo(client, message, false);
                });
              } else {
                var sql = `UPDATE Palpites SET GolsHomeTime =  ${placar1}, GolsForaTime = ${placar2} WHERE CodUsuario = '${user}' AND MatchNumber = ${idJogo}`;
                db.run(sql, function (err) {
                  if (err) {
                    return console.log(err.message);
                  }
                  // get the last insert id
                  console.log(`${moment()} - Palpite [${user}]`);
                  message.reply(`‚úÖ Palpite para o pr√≥ximo jogo foi atualizado.`);
                  getJogo(client, message, false);
                });
              }
            });
          } else {
            message.reply(`Irm√£o, vc ainda n√£o est√° cadastrado, por favor, use o comando /c {Apelido} para se cadastrar.`);
          }

        });
      });
    });
  }

  if (message.body === ('/eunaosei')) {
    db.serialize(() => {
      var user = message.author != undefined ? user = message.author : user = message.from;
      db.get(`SELECT * FROM Jogos WHERE date(DateUtc) >= date('now') ORDER BY DateUtc LIMIT 1`, (err, rowJogo) => {
        if (err) {
          return console.log("SELECT Proximo Jogo -> " + err.message);
        }
        db.get(`SELECT * FROM Usuarios WHERE Codigo = '${user}'`, (err, row) => {
          if (err) {
            return console.log("SELECT Usuario -> " + err.message);
          }
          if (row != undefined) {
            db.get(`SELECT * FROM Palpites WHERE CodUsuario = '${user}' AND MatchNumber = ${rowJogo.MatchNumber}`, (err, row) => {
              if (err) {
                return console.log("SELECT Palpite -> " + err.message);
              }

              var t1 = Math.floor(Math.random() * 15);
              var t2 = Math.floor(Math.random() * 15);

              if (row == undefined) {

                var sql = `INSERT INTO Palpites (CodUsuario, MatchNumber, GolsHomeTime, GolsForaTime) VALUES ('${user}', ${rowJogo.MatchNumber}, ${t1}, ${t2} )`;
                db.run(sql, function (err) {
                  if (err) {
                    return console.log("INSERT Palpite -> " + err.message);
                  }
                  // get the last insert id
                  console.log(`${moment().format("YYYY-MM-DD")} - Palpite [${user}]`);
                  message.reply(`‚úÖ Palpite para o pr√≥ximo jogo foi cadastrado com placares aleat√≥rios KKKKKKKK Foda-se.`);
                  getJogo(client, message, false, rowJogo.MatchNumber);
                });
              } else {
                var sql = `UPDATE Palpites SET GolsHomeTime =  ${t1}, GolsForaTime = ${t2} WHERE CodUsuario = '${user}' AND MatchNumber = ${rowJogo.MatchNumber}`;
                db.run(sql, function (err) {
                  if (err) {
                    return console.log("UPDATE Palpite -> " + err.message);
                  }
                  // get the last insert id
                  console.log(`${moment().format("YYYY-MM-DD")} - Palpite [${user}]`);
                  message.reply(`‚úÖ Palpite para o pr√≥ximo jogo foi cadastrado com placares aleat√≥rios KKKKKKKK Foda-se.`);
                  getJogo(client, message, false, rowJogo.MatchNumber);
                });
              }
            });
          } else {
            message.reply(`Irm√£o, vc ainda n√£o est√° cadastrado, por favor, use o comando /c {Apelido} para se cadastrar.`);
          }

        });
      });
    });
  }

  // Admin
  if (message.body.startsWith('/attjogo ')) {
    let tmp = message.body.toLowerCase().split(' ');
    if (tmp.length != 3) return message.reply(`‚ùå Ta faltando alguma informa√ß√£o ai, tem que ter 'ID' e o placar com dois n√∫meros separados por X.\nExemplo /bet ${idJogo} 1x1`);

    var idJogo = tmp[1].trim();

    var placar = tmp[2].split('x');
    if (placar.length != 2) return message.reply(`‚ùå O placar escolhido ta errado, tem que ser dois n√∫meros separados por X.\nExemplo /bet ${idJogo} 1x1`);

    var placar1 = placar[0].trim();
    var placar2 = placar[1].trim();

    if (!isNumeric(placar1)) return message.reply(`‚ùå O placar escolhido ta errado, tem que ser dois n√∫meros separados por X.\nExemplo /bet ${idJogo} 1x1`);
    if (!isNumeric(placar2)) return message.reply(`‚ùå O placar escolhido ta errado, tem que ser dois n√∫meros separados por X.\nExemplo /bet ${idJogo} 1x1`);

    db.serialize(() => {
      var sql = `UPDATE Jogos SET HomeTeamScore =  ${placar1}, AwayTeamScore = ${placar2} WHERE MatchNumber = ${idJogo}`;
      db.run(sql, function (err) {
        if (err) {
          message.reply(`‚ùå Deu erro`);
          return console.log(err.message);
        }
        message.reply(`‚úÖ Placar atualizado`);
        getJogo(client, message, false, idJogo);
      });
    });
  }

});

function atualizarTabela() {
  db.serialize(() => {
    var sqlJogos = `SELECT Codigo FROM Usuarios `;
    db.all(sqlJogos, (err, rowsUsers) => {
      if (err) {
        console.error(err.message);
      }

      rowsUsers.forEach((rowUser) => {
        db.all(`SELECT MatchNumber, GolsHomeTime, GolsForaTime FROM Palpites WHERE CodUsuario = '${rowUser.Codigo}'`, (err, rowsPalpites) => {
          if (err) {
            console.error(err.message);
          }
          rowsPalpites.forEach((rowsPalpite) => {
            db.get(`SELECT HomeTeamScore, AwayTeamScore FROM Jogos WHERE MatchNumber = ${rowsPalpite.MatchNumber}`, (err, rowJogo) => {
              if (err) {
                console.error(err.message);
              }
              var pontos = 0;

              if (rowsPalpite.GolsHomeTime == rowJogo.HomeTeamScore && rowsPalpite.GolsForaTime == rowJogo.AwayTeamScore) {
                pontos++;
              }
              db.run(`UPDATE Usuarios SET Pontos = ${pontos} WHERE Codigo = '${rowUser.Codigo}'`, function (err) {
                if (err) {
                  return console.log(err.message);
                }
              });
            });
          });
        });
      });
      // get the last insert id
      console.log(`${moment()} - Tabela atualizada`);
    });
  });
}

function getJogo(client, message, reply, idJogo, data) {
  db.serialize(() => {
    var sql = idJogo == undefined ? `SELECT * FROM Jogos WHERE date(DateUtc) >= date('now') ORDER BY DateUtc LIMIT 1` : `SELECT * FROM Jogos WHERE MatchNumber = ${idJogo}`
    if (data == true) sql = `SELECT * FROM Jogos WHERE DATE(DateUtc) = DATE('now')`;
    console.log(sql)
    db.all(sql, (err, row) => {
      if (err) {
        console.error(err.message);
      }

      if (row.length == 0) return message.reply("üòî Hoje n√£o haver√° jogos. Sinto muito.");

      row.forEach((row) => {
        var sqlPalpites = `SELECT Usuarios.Apelido,
        Palpites.GolsHomeTime,
        Palpites.GolsForaTime
        FROM Palpites
        INNER JOIN Usuarios ON Usuarios.Codigo = Palpites.CodUsuario
        WHERE Palpites.MatchNumber = ${row.MatchNumber}`;
        db.all(sqlPalpites, (err, rows) => {
          if (err) {
            console.error(`${sqlPalpites}\n${err.message}`);
          }
          var r = "üèÜ Trof√©u Ai Sabe üèÜ\n\n";
          r += getBandeira(row.HomeTeam) + " " + row.HomeTeam;

          if (row.HomeTeamScore != null) r += ` ${row.HomeTeamScore} x ${row.AwayTeamScore} `;
          else r += " x ";

          r += row.AwayTeam + " " + getBandeira(row.AwayTeam);

          if (moment().isBefore(row.DateUtc)) {
            r += "\nüóìÔ∏è " + moment(row.DateUtc).format("DD/MM/YYYY [√†s] HH:mm");
            r += "\nüÜî " + row.MatchNumber;
          }

          r += "\n\n*Palpites:*\n";
          if (rows.length == 0) {
            
            if (moment().isAfter(row.DateUtc)) {
              r += `_Ningu√©m palpitou nesse jogo._ ü§°\n`;
            } else {
              r += `_Ainda n√£o h√° palpites para esse jogo, seja o primeiro._ üëçüèª\n`;
            }

          } else {
            rows.forEach((rowPalpite) => {

              if (moment().isAfter(row.DateUtc)) {
                if (rowPalpite.GolsHomeTime < row.HomeTeamScore || rowPalpite.GolsForaTime < row.AwayTeamScore) {
                  r += "~";
                }
              }
              r += `${rowPalpite.Apelido} - ${rowPalpite.GolsHomeTime} x ${rowPalpite.GolsForaTime}`;
              if (moment().isAfter(row.DateUtc)) {
                if (rowPalpite.GolsHomeTime < row.HomeTeamScore || rowPalpite.GolsForaTime < row.AwayTeamScore) {
                  r += "~";
                }
              }
              r += "\n";
            });
          }
          if (moment().isBefore(row.DateUtc)) {
            r += `\n‚ö†Ô∏è Para palpitar nesse jogo use o comando:\n/bet ${row.MatchNumber} "Gols ${row.HomeTeam}"x"Gols ${row.AwayTeam}"`;
            r += `\n\n*Exemplo - /bet ${row.MatchNumber} 1x0*`;
          }

          if (reply == true) message.reply(r);
          else client.sendMessage(message.from, r);
        });
      });
    });
  });
}

function AiSabe(message) {
  var r = "üèÜ Trof√©u Ai Sabe üèÜ\n\n";
  r += "üìñ *Regras*\n";
  r += "‚ö†Ô∏è Ser√£o validados palpites iguais.\n";
  r += "‚ö†Ô∏è Palpites n√£o podem ser alterados durante o jogo.\n";
  r += "‚ö†Ô∏è Palpites s√≥ ser√£o abertos no dia do jogo.\n";
  r += "‚ö†Ô∏è Palpites v√°lidos apenas dentro dos 90 minutos de jogo.\n";
  r += "\n\n*Comandos*\n\n";
  r += "\n_/c 'Apelido'_\nUtilizado para realizar o cadastro do seu apelido, s√≥ pode ser utilizado uma vez.\nExemplo - /c Neymar\n‚ö†Ô∏è N√£o precisa colocar as aspas.\n\n";
  r += "\n_/proximojogo_\nUtilizado para ver o pr√≥ximo jogo.\n\n";
  r += "\n_/jogosDIA_\nLista todos os jogos do dia.\n\n";
  r += "\n_/jogos_\nLista todos os jogos com ID do jogo, times, datas e resultados.\n\n";
  r += "\n_/jogo 'ID'_\nMostra times, data, resultados e palpites com base no ID do jogo informado. \nExemplo - /jogo 1\n‚ö†Ô∏è N√£o precisa colocar as aspas.\n\n";
  r += "\n_/tabela_\nMostra a tabela de pontos em ordem de coloca√ß√£o.\n\n";
  r += "\n_/eunaosei_\nLan√ßa um palpite aleat√≥rio para o pr√≥ximo jogo KKKKK.\n\n";
  r += "\n\n\n*Como apostar üëá*\n";
  r += "\nPrimeiro voc√™ deve saber o ID do jogo que vai apostar, pode usar o comando \n*/jogos* ou */proximojogo* para ver os IDs.";
  r += "\nCom base na sua sabedoria futibolistica mentalize os resultados.";
  r += "\nPara efetivar seu palpite, utilize o comando \n*/bet 'ID' 'Gols t1'x'Gols t2'*";
  r += "\n‚ö†Ô∏è Aten√ß√£o\n ‚ö†Ô∏è N√£o precisa ter aspas;\n ‚ö†Ô∏è √â obrigatorio ter o ID do jogo;\n ‚ö†Ô∏è Precisa ter o X entre os placares;\n ‚ö†Ô∏è Ao executar o comando para o mesmo ID seu palpite ser√° atualizado.";
  r += "\nExemplo de como palpitar üëâ /bet 1 3x2";

  message.reply(r);
}


function getBandeira(time) {
  var bandeira = "";
  switch (time) {
    case "Andorra": bandeira = "üá¶üá©"; break;
    case "United Arab Emirates": bandeira = "üá¶üá™"; break;
    case "Afghanistan": bandeira = "üá¶üá´"; break;
    case "Antigua and Barbuda": bandeira = "üá¶üá¨"; break;
    case "Anguilla": bandeira = "üá¶üáÆ"; break;
    case "Albania": bandeira = "üá¶üá±"; break;
    case "Armenia": bandeira = "üá¶üá≤"; break;
    case "Angola": bandeira = "üá¶üá¥"; break;
    case "Antarctica": bandeira = "üá¶üá∂"; break;
    case "Argentina": bandeira = "üá¶üá∑"; break;
    case "American Samoa": bandeira = "üá¶üá∏"; break;
    case "Austria": bandeira = "üá¶üáπ"; break;
    case "Australia": bandeira = "üá¶üá∫"; break;
    case "Aruba": bandeira = "üá¶üáº"; break;
    case "√Öland Islands": bandeira = "üá¶üáΩ"; break;
    case "Azerbaijan": bandeira = "üá¶üáø"; break;
    case "Bosnia and Herzegovina": bandeira = "üáßüá¶"; break;
    case "Barbados": bandeira = "üáßüáß"; break;
    case "Bangladesh": bandeira = "üáßüá©"; break;
    case "Belgium": bandeira = "üáßüá™"; break;
    case "Burkina Faso": bandeira = "üáßüá´"; break;
    case "Bulgaria": bandeira = "üáßüá¨"; break;
    case "Bahrain": bandeira = "üáßüá≠"; break;
    case "Burundi": bandeira = "üáßüáÆ"; break;
    case "Benin": bandeira = "üáßüáØ"; break;
    case "Saint Barth√©lemy": bandeira = "üáßüá±"; break;
    case "Bermuda": bandeira = "üáßüá≤"; break;
    case "Brunei Darussalam": bandeira = "üáßüá≥"; break;
    case "Bolivia": bandeira = "üáßüá¥"; break;
    case "Bonaire, Sint Eustatius and Saba": bandeira = "üáßüá∂"; break;
    case "Brazil": bandeira = "üáßüá∑"; break;
    case "Bahamas": bandeira = "üáßüá∏"; break;
    case "Bhutan": bandeira = "üáßüáπ"; break;
    case "Bouvet Island": bandeira = "üáßüáª"; break;
    case "Botswana": bandeira = "üáßüáº"; break;
    case "Belarus": bandeira = "üáßüáæ"; break;
    case "Belize": bandeira = "üáßüáø"; break;
    case "Canada": bandeira = "üá®üá¶"; break;
    case "Cocos (Keeling) Islands": bandeira = "üá®üá®"; break;
    case "Congo": bandeira = "üá®üá©"; break;
    case "Central African Republic": bandeira = "üá®üá´"; break;
    case "Congo": bandeira = "üá®üá¨"; break;
    case "Switzerland": bandeira = "üá®üá≠"; break;
    case "C√¥te D'Ivoire": bandeira = "üá®üáÆ"; break;
    case "Cook Islands": bandeira = "üá®üá∞"; break;
    case "Chile": bandeira = "üá®üá±"; break;
    case "Cameroon": bandeira = "üá®üá≤"; break;
    case "China": bandeira = "üá®üá≥"; break;
    case "Colombia": bandeira = "üá®üá¥"; break;
    case "Costa Rica": bandeira = "üá®üá∑"; break;
    case "Cuba": bandeira = "üá®üá∫"; break;
    case "Cape Verde": bandeira = "üá®üáª"; break;
    case "Cura√ßao": bandeira = "üá®üáº"; break;
    case "Christmas Island": bandeira = "üá®üáΩ"; break;
    case "Cyprus": bandeira = "üá®üáæ"; break;
    case "Czech Republic": bandeira = "üá®üáø"; break;
    case "Germany": bandeira = "üá©üá™"; break;
    case "Djibouti": bandeira = "üá©üáØ"; break;
    case "Denmark": bandeira = "üá©üá∞"; break;
    case "Dominica": bandeira = "üá©üá≤"; break;
    case "Dominican Republic": bandeira = "üá©üá¥"; break;
    case "Algeria": bandeira = "üá©üáø"; break;
    case "Ecuador": bandeira = "üá™üá®"; break;
    case "Estonia": bandeira = "üá™üá™"; break;
    case "Egypt": bandeira = "üá™üá¨"; break;
    case "Western Sahara": bandeira = "üá™üá≠"; break;
    case "Eritrea": bandeira = "üá™üá∑"; break;
    case "Spain": bandeira = "üá™üá∏"; break;
    case "Ethiopia": bandeira = "üá™üáπ"; break;
    case "Finland": bandeira = "üá´üáÆ"; break;
    case "Fiji": bandeira = "üá´üáØ"; break;
    case "Falkland Islands (Malvinas)": bandeira = "üá´üá∞"; break;
    case "Micronesia": bandeira = "üá´üá≤"; break;
    case "Faroe Islands": bandeira = "üá´üá¥"; break;
    case "France": bandeira = "üá´üá∑"; break;
    case "Gabon": bandeira = "üá¨üá¶"; break;
    case "United Kingdom": bandeira = "üá¨üáß"; break;
    case "Grenada": bandeira = "üá¨üá©"; break;
    case "Georgia": bandeira = "üá¨üá™"; break;
    case "French Guiana": bandeira = "üá¨üá´"; break;
    case "Guernsey": bandeira = "üá¨üá¨"; break;
    case "Ghana": bandeira = "üá¨üá≠"; break;
    case "Gibraltar": bandeira = "üá¨üáÆ"; break;
    case "Greenland": bandeira = "üá¨üá±"; break;
    case "Gambia": bandeira = "üá¨üá≤"; break;
    case "Guinea": bandeira = "üá¨üá≥"; break;
    case "Guadeloupe": bandeira = "üá¨üáµ"; break;
    case "Equatorial Guinea": bandeira = "üá¨üá∂"; break;
    case "Greece": bandeira = "üá¨üá∑"; break;
    case "South Georgia": bandeira = "üá¨üá∏"; break;
    case "Guatemala": bandeira = "üá¨üáπ"; break;
    case "Guam": bandeira = "üá¨üá∫"; break;
    case "Guinea-Bissau": bandeira = "üá¨üáº"; break;
    case "Guyana": bandeira = "üá¨üáæ"; break;
    case "Hong Kong": bandeira = "üá≠üá∞"; break;
    case "Heard Island and Mcdonald Islands": bandeira = "üá≠üá≤"; break;
    case "Honduras": bandeira = "üá≠üá≥"; break;
    case "Croatia": bandeira = "üá≠üá∑"; break;
    case "Haiti": bandeira = "üá≠üáπ"; break;
    case "Hungary": bandeira = "üá≠üá∫"; break;
    case "Indonesia": bandeira = "üáÆüá©"; break;
    case "Ireland": bandeira = "üáÆüá™"; break;
    case "Israel": bandeira = "üáÆüá±"; break;
    case "Isle of Man": bandeira = "üáÆüá≤"; break;
    case "India": bandeira = "üáÆüá≥"; break;
    case "British Indian Ocean Territory": bandeira = "üáÆüá¥"; break;
    case "Iraq": bandeira = "üáÆüá∂"; break;
    case "Iran": bandeira = "üáÆüá∑"; break;
    case "Iceland": bandeira = "üáÆüá∏"; break;
    case "Italy": bandeira = "üáÆüáπ"; break;
    case "Jersey": bandeira = "üáØüá™"; break;
    case "Jamaica": bandeira = "üáØüá≤"; break;
    case "Jordan": bandeira = "üáØüá¥"; break;
    case "Japan": bandeira = "üáØüáµ"; break;
    case "Kenya": bandeira = "üá∞üá™"; break;
    case "Kyrgyzstan": bandeira = "üá∞üá¨"; break;
    case "Cambodia": bandeira = "üá∞üá≠"; break;
    case "Kiribati": bandeira = "üá∞üáÆ"; break;
    case "Comoros": bandeira = "üá∞üá≤"; break;
    case "Saint Kitts and Nevis": bandeira = "üá∞üá≥"; break;
    case "North Korea": bandeira = "üá∞üáµ"; break;
    case "South Korea": bandeira = "üá∞üá∑"; break;
    case "Kuwait": bandeira = "üá∞üáº"; break;
    case "Cayman Islands": bandeira = "üá∞üáæ"; break;
    case "Kazakhstan": bandeira = "üá∞üáø"; break;
    case "Lao People's Democratic Republic": bandeira = "üá±üá¶"; break;
    case "Lebanon": bandeira = "üá±üáß"; break;
    case "Saint Lucia": bandeira = "üá±üá®"; break;
    case "Liechtenstein": bandeira = "üá±üáÆ"; break;
    case "Sri Lanka": bandeira = "üá±üá∞"; break;
    case "Liberia": bandeira = "üá±üá∑"; break;
    case "Lesotho": bandeira = "üá±üá∏"; break;
    case "Lithuania": bandeira = "üá±üáπ"; break;
    case "Luxembourg": bandeira = "üá±üá∫"; break;
    case "Latvia": bandeira = "üá±üáª"; break;
    case "Libya": bandeira = "üá±üáæ"; break;
    case "Morocco": bandeira = "üá≤üá¶"; break;
    case "Monaco": bandeira = "üá≤üá®"; break;
    case "Moldova": bandeira = "üá≤üá©"; break;
    case "Montenegro": bandeira = "üá≤üá™"; break;
    case "Saint Martin (French Part)": bandeira = "üá≤üá´"; break;
    case "Madagascar": bandeira = "üá≤üá¨"; break;
    case "Marshall Islands": bandeira = "üá≤üá≠"; break;
    case "Macedonia": bandeira = "üá≤üá∞"; break;
    case "Mali": bandeira = "üá≤üá±"; break;
    case "Myanmar": bandeira = "üá≤üá≤"; break;
    case "Mongolia": bandeira = "üá≤üá≥"; break;
    case "Macao": bandeira = "üá≤üá¥"; break;
    case "Northern Mariana Islands": bandeira = "üá≤üáµ"; break;
    case "Martinique": bandeira = "üá≤üá∂"; break;
    case "Mauritania": bandeira = "üá≤üá∑"; break;
    case "Montserrat": bandeira = "üá≤üá∏"; break;
    case "Malta": bandeira = "üá≤üáπ"; break;
    case "Mauritius": bandeira = "üá≤üá∫"; break;
    case "Maldives": bandeira = "üá≤üáª"; break;
    case "Malawi": bandeira = "üá≤üáº"; break;
    case "Mexico": bandeira = "üá≤üáΩ"; break;
    case "Malaysia": bandeira = "üá≤üáæ"; break;
    case "Mozambique": bandeira = "üá≤üáø"; break;
    case "Namibia": bandeira = "üá≥üá¶"; break;
    case "New Caledonia": bandeira = "üá≥üá®"; break;
    case "Niger": bandeira = "üá≥üá™"; break;
    case "Norfolk Island": bandeira = "üá≥üá´"; break;
    case "Nigeria": bandeira = "üá≥üá¨"; break;
    case "Nicaragua": bandeira = "üá≥üáÆ"; break;
    case "Netherlands": bandeira = "üá≥üá±"; break;
    case "Norway": bandeira = "üá≥üá¥"; break;
    case "Nepal": bandeira = "üá≥üáµ"; break;
    case "Nauru": bandeira = "üá≥üá∑"; break;
    case "Niue": bandeira = "üá≥üá∫"; break;
    case "New Zealand": bandeira = "üá≥üáø"; break;
    case "Oman": bandeira = "üá¥üá≤"; break;
    case "Panama": bandeira = "üáµüá¶"; break;
    case "Peru": bandeira = "üáµüá™"; break;
    case "French Polynesia": bandeira = "üáµüá´"; break;
    case "Papua New Guinea": bandeira = "üáµüá¨"; break;
    case "Philippines": bandeira = "üáµüá≠"; break;
    case "Pakistan": bandeira = "üáµüá∞"; break;
    case "Poland": bandeira = "üáµüá±"; break;
    case "Saint Pierre and Miquelon": bandeira = "üáµüá≤"; break;
    case "Pitcairn": bandeira = "üáµüá≥"; break;
    case "Puerto Rico": bandeira = "üáµüá∑"; break;
    case "Palestinian Territory": bandeira = "üáµüá∏"; break;
    case "Portugal": bandeira = "üáµüáπ"; break;
    case "Palau": bandeira = "üáµüáº"; break;
    case "Paraguay": bandeira = "üáµüáæ"; break;
    case "Qatar": bandeira = "üá∂üá¶"; break;
    case "R√©union": bandeira = "üá∑üá™"; break;
    case "Romania": bandeira = "üá∑üá¥"; break;
    case "Serbia": bandeira = "üá∑üá∏"; break;
    case "Russia": bandeira = "üá∑üá∫"; break;
    case "Rwanda": bandeira = "üá∑üáº"; break;
    case "Saudi Arabia": bandeira = "üá∏üá¶"; break;
    case "Solomon Islands": bandeira = "üá∏üáß"; break;
    case "Seychelles": bandeira = "üá∏üá®"; break;
    case "Sudan": bandeira = "üá∏üá©"; break;
    case "Sweden": bandeira = "üá∏üá™"; break;
    case "Singapore": bandeira = "üá∏üá¨"; break;
    case "Saint Helena, Ascension and Tristan Da Cunha": bandeira = "üá∏üá≠"; break;
    case "Slovenia": bandeira = "üá∏üáÆ"; break;
    case "Svalbard and Jan Mayen": bandeira = "üá∏üáØ"; break;
    case "Slovakia": bandeira = "üá∏üá∞"; break;
    case "Sierra Leone": bandeira = "üá∏üá±"; break;
    case "San Marino": bandeira = "üá∏üá≤"; break;
    case "Senegal": bandeira = "üá∏üá≥"; break;
    case "Somalia": bandeira = "üá∏üá¥"; break;
    case "Suriname": bandeira = "üá∏üá∑"; break;
    case "South Sudan": bandeira = "üá∏üá∏"; break;
    case "Sao Tome and Principe": bandeira = "üá∏üáπ"; break;
    case "El Salvador": bandeira = "üá∏üáª"; break;
    case "Sint Maarten (Dutch Part)": bandeira = "üá∏üáΩ"; break;
    case "Syrian Arab Republic": bandeira = "üá∏üáæ"; break;
    case "Swaziland": bandeira = "üá∏üáø"; break;
    case "Turks and Caicos Islands": bandeira = "üáπüá®"; break;
    case "Chad": bandeira = "üáπüá©"; break;
    case "French Southern Territories": bandeira = "üáπüá´"; break;
    case "Togo": bandeira = "üáπüá¨"; break;
    case "Thailand": bandeira = "üáπüá≠"; break;
    case "Tajikistan": bandeira = "üáπüáØ"; break;
    case "Tokelau": bandeira = "üáπüá∞"; break;
    case "Timor-Leste": bandeira = "üáπüá±"; break;
    case "Turkmenistan": bandeira = "üáπüá≤"; break;
    case "Tunisia": bandeira = "üáπüá≥"; break;
    case "Tonga": bandeira = "üáπüá¥"; break;
    case "Turkey": bandeira = "üáπüá∑"; break;
    case "Trinidad and Tobago": bandeira = "üáπüáπ"; break;
    case "Tuvalu": bandeira = "üáπüáª"; break;
    case "Taiwan": bandeira = "üáπüáº"; break;
    case "Tanzania": bandeira = "üáπüáø"; break;
    case "Ukraine": bandeira = "üá∫üá¶"; break;
    case "Uganda": bandeira = "üá∫üá¨"; break;
    case "United States Minor Outlying Islands": bandeira = "üá∫üá≤"; break;
    case "USA": bandeira = "üá∫üá∏"; break;
    case "Uruguay": bandeira = "üá∫üáæ"; break;
    case "Uzbekistan": bandeira = "üá∫üáø"; break;
    case "Vatican City": bandeira = "üáªüá¶"; break;
    case "Saint Vincent and The Grenadines": bandeira = "üáªüá®"; break;
    case "Venezuela": bandeira = "üáªüá™"; break;
    case "Virgin Islands, British": bandeira = "üáªüá¨"; break;
    case "Virgin Islands, U.S.": bandeira = "üáªüáÆ"; break;
    case "Viet Nam": bandeira = "üáªüá≥"; break;
    case "Vanuatu": bandeira = "üáªüá∫"; break;
    case "Wallis and Futuna": bandeira = "üáºüá´"; break;
    case "Samoa": bandeira = "üáºüá∏"; break;
    case "Yemen": bandeira = "üáæüá™"; break;
    case "Mayotte": bandeira = "üáæüáπ"; break;
    case "South Africa": bandeira = "üáøüá¶"; break;
    case "Zambia": bandeira = "üáøüá≤"; break;
    case "Zimbabwe": bandeira = "üáøüáº"; break;
    case "Wales": bandeira = "üè¥Û†ÅßÛ†Å¢Û†Å∑Û†Å¨Û†Å≥Û†Åø"; break;
    default: bandeira = '';
  }
  return bandeira;
}

function isNumeric(value) {
  return /^-?\d+$/.test(value);
}